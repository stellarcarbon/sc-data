name: Daily Audit Dump

on:
  schedule:
    - cron: '47 14 * * *'  # Daily at 14:47 UTC
  workflow_dispatch:

jobs:
  dump-audit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sc-data
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    # --------------------- PIP CACHE ---------------------
    - name: Restore pip cache
      id: pip-restore
      uses: actions/cache/restore@v4
      with:
        path: ~/.cache/pip
        key: DUMMY
        restore-keys: |
          pip-${{ runner.os }}-sc-audit-

    - name: Install latest sc-audit
      id: install-scaudit
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade sc-audit
        ver=$(python -m pip show sc-audit | awk '/^Version:/ {print $2}')
        echo "Installed sc-audit v$ver"
        echo "ver=$ver" >> "$GITHUB_OUTPUT"

    - name: Save pip cache (if new version)
      uses: actions/cache/save@v4
      if: ${{ !endsWith(steps.pip-restore.outputs.cache-matched-key, steps.install-scaudit.outputs.ver) }}
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-sc-audit-${{ steps.install-scaudit.outputs.ver }}

    # --------------------- DB CACHE ---------------------
    - name: Restore SQLite DB
      id: db-restore
      uses: actions/cache/restore@v4
      with:
        path: ./sc-audit.sqlite3
        key: DUMMY
        restore-keys: |
          sc-audit-db-${{ runner.os }}-

    # --------------------- MAIN WORK ---------------------
    - name: Upgrade schema
      id: schema-upgrade
      run: |
        oldrev=$(sc-audit schema current | awk '{print $1}')
        echo "rev_before=$oldrev" >> "$GITHUB_OUTPUT"
        sc-audit schema upgrade

    - name: Catch up
      run: sc-audit catch-up

    - name: Dump NDJSON files
      run: sc-audit backup dump ./sc-audit

    - name: Get current schema revision
      id: get-revision
      run: |
          rev=$(sc-audit schema current | awk '{print $1}')
          echo "Alembic revision: $rev"
          echo "revision=$rev" >> "$GITHUB_OUTPUT"

    - name: Warn if new incompatible schema was applied
      id: check-schema-change
      run: |
        PREV_VER=$(echo "$MATCHED_KEY" | grep -o '[0-9]\+\.[0-9]\+\(\.[0-9]\+\)\?$')

        # Extract semver prefixes
        CUR_PREFIX=$(echo "$CUR_VER" | cut -d. -f1,2)
        PREV_PREFIX=$(echo "$PREV_VER" | cut -d. -f1,2)

        if [ "$REV_BEFORE" != "$REV_AFTER" ] && [ "$CUR_PREFIX" != "$PREV_PREFIX" ]; then
          DATA_COMMIT=$(git rev-parse --verify HEAD)

          WARN=$(cat << EOF
          sc-audit v$CUR_VER applies migrations since v$PREV_VER. Tag the previous HEAD as:
          ```
          git tag -a sc-audit-v$PREV_PREFIX $DATA_COMMIT -m "sc-audit schema $REV_BEFORE"
          git push --tags
          ```
          EOF
          )
          echo "::warning::$WARN"
          echo "warning=$WARN" >> "$GITHUB_OUTPUT"
        else
          echo "warning='DB schema remains backwards-compatible'" >> "$GITHUB_OUTPUT"
        fi
      env:
        CUR_VER: ${{ steps.install-scaudit.outputs.ver }}
        MATCHED_KEY: ${{ steps.pip-restore.outputs.cache-matched-key }}
        REV_BEFORE: ${{ steps.schema-upgrade.outputs.rev_before }}
        REV_AFTER: ${{ steps.get-revision.outputs.revision }}

    # --------------------- DB CACHE SAVE ---------------------
    - name: Compute DB size
      id: db-size
      run: |
        size=$(stat --format='%s' ./sc-audit.sqlite3 || echo 0)
        echo "size=$size" >> "$GITHUB_OUTPUT"

    - name: Save DB cache (if changed)
      uses: actions/cache/save@v4
      if: ${{ !endsWith(steps.db-restore.outputs.cache-matched-key, steps.db-size.outputs.size) }}
      with:
        path: ./sc-audit.sqlite3
        key: sc-audit-db-${{ runner.os }}-${{ steps.db-size.outputs.size }}

    # --------------------- GIT COMMIT ---------------------
    - name: Commit new data
      run: |
        git config user.name  "github-actions"
        git config user.email "actions@github.com"
        git add sc-audit/*.ndjson
        if git diff --cached --quiet; then
          echo "No changes to commit." | tee commit-output.txt
        else
          git commit -m "sc-audit schema $SC_AUDIT_REVISION" 2>&1 | tee commit-output.txt
          git push 2>&1 | tee -a commit-output.txt
        fi
      env:
        SC_AUDIT_REVISION: ${{ steps.get-revision.outputs.revision }}

    # --------------------- SUMMARY ---------------------
    - name: Write job summary
      run: |
        echo "### Daily Audit Dump Summary" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "**sc-audit version:** ${{ steps.install-scaudit.outputs.ver }}" >> "$GITHUB_STEP_SUMMARY"
        echo "**Schema revision before upgrade:** ${{ steps.schema-upgrade.outputs.rev_before }}" >> "$GITHUB_STEP_SUMMARY"
        echo "**Schema revision after upgrade:** ${{ steps.get-revision.outputs.revision }}" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        echo "**Git commit output:**" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"
        cat "$GITHUB_WORKSPACE/commit-output.txt" >> "$GITHUB_STEP_SUMMARY"
        echo '```' >> "$GITHUB_STEP_SUMMARY"

        echo "" >> "$GITHUB_STEP_SUMMARY"
        if [[ "${{ steps.check-schema-change.outputs.warning }}" == sc-audit\ v* ]]; then
          echo "**⚠️ Schema migration warning:**" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "**ℹ️ Schema check result:**" >> "$GITHUB_STEP_SUMMARY"
        fi
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "${{ steps.check-schema-change.outputs.warning }}" >> "$GITHUB_STEP_SUMMARY"

    # --------------------- DEBUG ---------------------
    - name: Debug cache keys
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "Matched pip key: ${{ steps.pip-restore.outputs.cache-matched-key }}"
        echo "Generated pip key: pip-${{ runner.os }}-sc-audit-${{ steps.install-scaudit.outputs.ver }}"
        echo "Matched db key:  ${{ steps.db-restore.outputs.cache-matched-key }}"
        echo "Generated db key: sc-audit-db-${{ runner.os }}-${{ steps.db-size.outputs.size }}"
